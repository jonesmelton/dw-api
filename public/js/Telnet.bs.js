// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";

function teloptFromInt(opt) {
  if (opt >= 240) {
    if (opt !== 250) {
      if (opt !== 255) {
        if (opt >= 241) {
          return /* OTHER */{
                  _0: opt
                };
        } else {
          return /* SE */2;
        }
      } else {
        return /* IAC */0;
      }
    } else {
      return /* SB */1;
    }
  } else if (opt !== 0) {
    if (opt !== 201) {
      return /* OTHER */{
              _0: opt
            };
    } else {
      return /* GMCP */3;
    }
  } else {
    return /* None */4;
  }
}

function stringFromTelopt(opt) {
  if (typeof opt !== "number") {
    return String.fromCharCode(opt._0);
  }
  switch (opt) {
    case /* IAC */0 :
        return " IAC ";
    case /* SB */1 :
        return " SB ";
    case /* SE */2 :
        return " SE ";
    case /* GMCP */3 :
        return " GMCP ";
    case /* None */4 :
        return "";
    
  }
}

function teloptToString(code) {
  return stringFromTelopt(teloptFromInt(code));
}

function run(chars, _start, end, _acc) {
  while(true) {
    var acc = _acc;
    var start = _start;
    var current = Belt_Option.getWithDefault(Belt_Option.map(Belt_Array.get(chars, start), teloptFromInt), /* None */4);
    var next = Belt_Option.getWithDefault(Belt_Option.map(Belt_Array.get(chars, start + 1 | 0), teloptFromInt), /* None */4);
    var nextnext = Belt_Option.getWithDefault(Belt_Option.map(Belt_Array.get(chars, start + 2 | 0), teloptFromInt), /* None */4);
    if (typeof current === "number") {
      if (current !== 0) {
        if (current >= 4) {
          return acc;
        }
        
      } else if (next === 1 && nextnext === 3) {
        _start = start + 3 | 0;
        continue ;
      }
      
    }
    _acc = acc + stringFromTelopt(current);
    _start = start + 1 | 0;
    continue ;
  };
}

function parse(chars) {
  return run(chars, 0, chars.length, "");
}

export {
  teloptFromInt ,
  stringFromTelopt ,
  teloptToString ,
  run ,
  parse ,
}
/* No side effect */
